package uk.man.atm.composite;

import com.intrinsarc.backbone.runtime.api.*;

/** generated by Evolve */
public class ATMSystemFactory implements IHardcodedFactory
{
  private java.util.List<IHardcodedFactory> children;

  // attributes
  private String name;
  private int balance;
  private int number;
  private int balance1;
  private int number1;

  // connectors
  private uk.man.atm.IAccount c;
  private uk.man.atm.IAccount c1;
  private uk.man.atm.IBankServices c2;
  private uk.man.atm.ICardReader c3;
  private uk.man.atm.IAtmCli c4;

 // parts
  private uk.man.atm.Bank bank = new uk.man.atm.Bank();
  private uk.man.atm.Account acc1 = new uk.man.atm.Account();
  private uk.man.atm.Account acc2 = new uk.man.atm.Account();
  private uk.man.atm.UI cli = new uk.man.atm.UI();
  private uk.man.atm.CardReader cardReader = new uk.man.atm.CardReader();
  private uk.man.atm.ATMRunner x2 = new uk.man.atm.ATMRunner();
  public com.intrinsarc.backbone.runtime.api.IRun getRun_Provided() { return x2; }

  public static void main(String args[])
  {
    ATMSystemFactory factory = new ATMSystemFactory();
    factory.initialize(null, null);
    factory.cli.show();
  }

  public ATMSystemFactory() {}

  public ATMSystemFactory initialize(IHardcodedFactory parent, java.util.Map<String, Object> values)
  {
    name = "BigBank";
    balance = 100;
    number = 1111;
    balance1 = 68584;
    number1 = 2222;
    bank.setName(name);
    acc1.setBalance(balance);
    acc1.setNumber(number);
    acc2.setBalance(balance1);
    acc2.setNumber(number1);
    c = acc1;
    c1 = acc2;
    c2 = bank;
    c3 = cardReader;
    c4 = cli;
    bank.addAccount(c);
    bank.addAccount(c1);
    cli.setBank(c2);
    cli.setReader(c3);
    x2.setShow(c4);
    return this;
  }
  public void childDestroyed(IHardcodedFactory child) { children.remove(child); }

  public void destroy()
  {
    destroyChildren(null, this, children);
    bank.removeAccount(c);
    bank.removeAccount(c1);
    cli.setBank(null);
    cli.setReader(null);
    x2.setShow(null);
  }

  static void destroyChildren(IHardcodedFactory parent, IHardcodedFactory me, java.util.List<IHardcodedFactory> children)
  {
    if (parent != null)
      parent.childDestroyed(me);
    if (children != null) {
      java.util.List<IHardcodedFactory> copy = new java.util.ArrayList<IHardcodedFactory>(children);
      java.util.Collections.reverse(copy);
      for (IHardcodedFactory f : copy)
        f.destroy();
    }
  }
}
