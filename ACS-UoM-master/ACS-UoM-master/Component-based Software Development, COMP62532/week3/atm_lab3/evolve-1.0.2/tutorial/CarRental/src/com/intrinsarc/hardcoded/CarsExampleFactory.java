package com.intrinsarc.hardcoded;

import com.intrinsarc.backbone.runtime.api.*;

/** generated by Evolve */
public class CarsExampleFactory implements IHardcodedFactory
{
  private java.util.List<IHardcodedFactory> children;

  // attributes
  private java.util.Date purchasedWhen;
  private String model;
  private java.util.Date purchasedWhen1;
  private String model1;
  private String renterName;
  private String renterName1;

  // connectors
  private com.intrinsarc.base.IRentalCarDetails c;
  private com.intrinsarc.base.IRenterDetails c1;
  private com.intrinsarc.base.IRentalCarDetails c2;
  private com.intrinsarc.base.IRenterDetails c3;

 // parts
  private com.intrinsarc.base.CarsExampleRunner x = new com.intrinsarc.base.CarsExampleRunner();
  private com.intrinsarc.base.RentalCarDetails x1 = new com.intrinsarc.base.RentalCarDetails();
  private com.intrinsarc.base.RenterDetails x3 = new com.intrinsarc.base.RenterDetails();
  private com.intrinsarc.base.RentalCarDetails x5 = new com.intrinsarc.base.RentalCarDetails();
  private com.intrinsarc.base.RenterDetails x7 = new com.intrinsarc.base.RenterDetails();
  public com.intrinsarc.backbone.runtime.api.IRun getRun_Provided() { return x; }

  public static void main(String args[])
  {
    CarsExampleFactory factory = new CarsExampleFactory();
    if (factory.initialize(null, null).getRun_Provided().run(args))
      factory.destroy(); // destroy the factory once the run method has completed
  }

  public CarsExampleFactory() {}

  public CarsExampleFactory initialize(IHardcodedFactory parent, java.util.Map<String, Object> values)
  {
    purchasedWhen = new java.util.Date(105, 10, 25);
    model = "Porsche";
    purchasedWhen1 = new java.util.Date(109, 5, 15);
    model1 = "Mini";
    renterName = "";
    renterName1 = "";
    x1.setPurchased(purchasedWhen);
    x1.setModel(model);
    x3.setRenterName(renterName);
    x5.setPurchased(purchasedWhen1);
    x5.setModel(model1);
    x7.setRenterName(renterName1);
    c = x1;
    c1 = x3;
    c2 = x5;
    c3 = x7;
    x.addCar(c);
    x.addCar(c2);
    x1.setRenter(c1);
    x5.setRenter(c3);
    x.afterInit();
    return this;
  }
  public void childDestroyed(IHardcodedFactory child) { children.remove(child); }

  public void destroy()
  {
    destroyChildren(null, this, children);
    x.beforeDelete();
    x.removeCar(c);
    x.removeCar(c2);
    x1.setRenter(null);
    x5.setRenter(null);
  }

  static void destroyChildren(IHardcodedFactory parent, IHardcodedFactory me, java.util.List<IHardcodedFactory> children)
  {
    if (parent != null)
      parent.childDestroyed(me);
    if (children != null) {
      java.util.List<IHardcodedFactory> copy = new java.util.ArrayList<IHardcodedFactory>(children);
      java.util.Collections.reverse(copy);
      for (IHardcodedFactory f : copy)
        f.destroy();
    }
  }
}
